name: Promote

on:
  release:
    types:
      - released
env:
  DEPLOYMENT_ENVIRONMENT: Production
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  BACKEND_IMAGE_NAME: ${{ github.repository }}-backend

jobs:
  generate-version:
    name: Generate Version
    uses: Gershon-A/cookme/.github/workflows/version.yaml@main
    with:
      deployment-environment: Production

  promote-image_to_prod:
    name: Promote Image
    runs-on: ubuntu-latest
    needs: [generate-version]

    permissions:
      id-token: write
      contents: read
      packages: write

    env:
      RELEASE_ID: ${{ github.event.release.id }}
      VERSION: ${{ needs.generate-version.outputs.version }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Lowercase Environment
        id: lowercase-environment
        uses: ASzc/change-string-case-action@v5
        with:
          string: ${{ env.IMAGE_NAME }}

      - name: Lowercase Environment backend
        id: lowercase-environment-backend
        uses: ASzc/change-string-case-action@v5
        with:
          string: ${{ env.BACKEND_IMAGE_NAME }}

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.COOKME_GITHUB_WORKFLOW_TOKEN }}

      - name: Pool CookMe APP Staging Image from Container registry
        id: pool-staging-image
        env:
          IMAGE_TAG: release-${{ env.VERSION }}
          IMAGE_NAME: ${{ steps.lowercase-environment.outputs.lowercase }}
        run: |
          docker pull $REGISTRY/$IMAGE_NAME:$IMAGE_TAG

      - name: Pool CookMe APP backend Staging Image from Container registry
        id: pool-staging-image-backend
        env:
          IMAGE_TAG: release-${{ env.VERSION }}
          IMAGE_NAME: ${{ steps.lowercase-environment-backend.outputs.lowercase }}
        run: |
          docker pull $REGISTRY/$BACKEND_IMAGE_NAME:$IMAGE_TAG

      - name: Tag/Push CookMe APP Production Image to Container registry
        env:
          IMAGE_TAG: release-${{ env.VERSION }}
          IMAGE_TAG_PROD: latest
          IMAGE_NAME: ${{ steps.lowercase-environment.outputs.lowercase }}
        run: |
          docker tag $REGISTRY/$IMAGE_NAME:$IMAGE_TAG $REGISTRY/$IMAGE_NAME:$IMAGE_TAG_PROD
          docker push $REGISTRY/$IMAGE_NAME:$IMAGE_TAG_PROD

      - name: Tag/Push CookMe backend Production Image to Container registry
        env:
          IMAGE_TAG: release-${{ env.VERSION }}
          IMAGE_TAG_PROD: latest
          IMAGE_NAME: ${{ steps.lowercase-environment-backend.outputs.lowercase }}
        run: |
          docker tag $REGISTRY/$BACKEND_IMAGE_NAME:$IMAGE_TAG $REGISTRY/$BACKEND_IMAGE_NAME:$IMAGE_TAG_PROD
          docker push $REGISTRY/$BACKEND_IMAGE_NAME:$IMAGE_TAG_PROD
          docker logout

  # deploy-to-prod:
  #   name: Deploy to Production
  #   runs-on: ubuntu-latest
  #   needs: [promote-image_to_prod]

  #   permissions:
  #     id-token: write
  #     contents: read

  #   env:
  #     DEPLOYMENT_ENVIRONMENT: Production
  #     RELEASE_ID: ${{ github.event.release.id }}
  #     VERSION: ${{ needs.generate-version.outputs.version }}

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3

  #     - name: Prepare MySql init file
  #       run: |
  #         echo "CREATE DATABASE IF NOT EXISTS ${{ secrets.DBNAME }};
  #               CREATE USER '${{ secrets.DBUSER }}'@'%' IDENTIFIED BY '${{ secrets.DBPASSWORD }}';
  #               GRANT CREATE, ALTER, INDEX, LOCK TABLES, REFERENCES, UPDATE, DELETE, DROP, SELECT, INSERT ON `cookme-app`.* TO 'localtest'@'%';
  #               FLUSH PRIVILEGES;" >> .github/init.sql
  #         cat .github/init.sql

  #     - name: Prepare Docker Compose
  #       run: |
  #         # Replace values in file
  #         sed -i "s/[DBUSER]/${{ secrets.DBUSER }}/g" .github/docker-compose.ci-prod.yaml
  #         sed -i "s/[DBPASSWORD]/${{ secrets.DBPASSWORD }}/g" .github/docker-compose.ci-prod.yaml
  #         sed -i "s/[DBNAME]/${{ secrets.DBNAME }}/g" .github/docker-compose.ci-prod.yaml
  #         sed -i "s/[SECRETKEY]/${{ secrets.SECRETKEY }}/g" .github/docker-compose.ci-prod.yaml
  #         cat .github/docker-compose.ci-prod.yaml
  #       # create bash script to replace values in files from github secrets

  # need to generate docker-compose with secrets from github secrets
  # the template located .github\docker-compose.ci-prod.yaml

  # Need workflow that can deploy docker-compose to production remote server
  # once the promote finished need establish remote connection and update compose that already running on the server
  # Example https://github.com/NetCoreTemplates/vue-mjs/blob/main/.github/workflows/release.yml
  # Remote server hosted at DigitalOcean - connect to it with token
  # Example   https://docs.servicestack.net/do-github-action-mix-deployment
  # SSH access to remote server closed to public by VPN connection
  # Need to establish connection to remote server with SSH key
  # Example
  # https://github.com/appleboy/ssh-action
  #
  #  - name: Install doctl
  #    uses: digitalocean/action-doctl@v2
  #    with:
  #      token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
  #
  #  - name: Deploy to Production
  #    uses: appleboy/ssh-action@master
  #    with:
  #      host: ${{ secrets.PROD_HOST }}
  #      username: ${{ secrets.PROD_USERNAME }}
  #      key: ${{ secrets.PROD_KEY }}
  #      script: |
  #        docker-compose pull
  #        docker-compose up -d
  #
  #  - name: Update Release
  #    uses: Gershon-A/cookme/.github/workflows/update-release.yaml@main
  #    with:
  #      release-id: ${{ env.RELEASE_ID }}
  #      deployment-environment: ${{ env.DEPLOYMENT_ENVIRONMENT }}
  #      version: ${{ env.VERSION }}
