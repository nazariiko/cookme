# Use root/example as user/password credentials
version: "3.6"
networks:
  cookme-app-net:

services:

  datadog:
    image: gcr.io/datadoghq/agent:7
    container_name: dd-agent
    restart: always
    environment:
      - DD_API_KEY=${DD_API_KEY}
      # - DD_SITE=us5.datadoghq.com
      - DD_HOSTNAME=srv1.medooza.network
      - DD_APM_ENABLED=true
      - DD_LOGS_ENABLED=true
      - DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL=true
      - DD_DOGSTATSD_NON_LOCAL_TRAFFIC=true
      - DD_CONTAINER_EXCLUDE=image:gcr.io/datadoghq/agent*
      - DD_CONTAINER_EXCLUDE_METRICS=image:gcr.io/datadoghq/agent*
      - DD_CONTAINER_EXCLUDE_LOGS=image:gcr.io/datadoghq/agent*
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /proc/:/host/proc/:ro
      - /sys/fs/cgroup/:/host/sys/fs/cgroup:ro
      - /opt/datadog-agent/run:/opt/datadog-agent/run:rw
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    env_file:
      - .env
  db:
    image: mysql:8.0
    container_name: mysqldb
    labels:
      com.datadoghq.ad.logs: '[{"source": "mysql", "service": "mysql"}]'
    # NOTE: use of "mysql_native_password" is not recommended: https://dev.mysql.com/doc/refman/8.0/en/upgrading-from-previous-series.html#upgrade-caching-sha2-password
    # (this is just an example, not intended to be a production configuration)
    command: --default-authentication-plugin=mysql_native_password
    restart: always
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${DBNAME}
      - MYSQL_USER=${DBUSER}
      - MYSQL_PASSWORD=${DBPASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - ./db:/var/lib/mysql
      - ./Docker/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - cookme-app-net
    env_file:
      - .env

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: pma
    links:
      - db
    networks:
      - cookme-app-net
    environment:
      PMA_HOST: mysqldb
      PMA_PORT: 3306
      PMA_ARBITRARY: 1
      UPLOAD_LIMIT: 100M
    restart: always
    ports:
      - 8585:80

  cookme-gpt: # service name
    container_name: cookme-gpt
    # name of the image
    image: ghcr.io/gershon-a/cookme-backend:main
    # map data and files from parent directory in host to microservice directory in docker container
    volumes:
      - .:/usr/src/cook_me_gpt
    command: python manage.py runserver 0.0.0.0:8000
    ports:
      - 8888:8000
      # - 8000
    restart: "on-failure"
    links:
      - db
    depends_on:
      - cookmeapp
    networks:
      - cookme-app-net
    # file where env variables are stored. Used as best practice so as not to expose secret keys
    env_file:
      - .env
    labels:
      com.datadoghq.ad.init_configs: '[{}]'
      com.datadoghq.ad.instances: '[{"host":"%%host%%", "port": "%%port%%"}]'
      com.datadoghq.ad.logs: '[{"source": "python", "service": "cookme-gpt"}]'
      # com.datadoghq.tags.env:  ${NODE_ENV}
      com.datadoghq.tags.service: 'cookme-gpt'
      com.datadoghq.tags.version: "latest"
      com.datadoghq.ad.logs: >-
       [{
          "source": "python",
          "service": "cookme-gpt",
          "auto_multi_line_detection": true
        }]
      com.centurylinklabs.watchtower.scope: cookme-gpt

  cookmeapp:
    # image: ghcr.io/gershon-a/cookme:16.17.0-bullseye-slim
    image: ghcr.io/gershon-a/cookme:main
    # image: ghcr.io/gershon-a/cookme:1.0.9
    # image: ghcr.io/gershon-a/cookme:release-1.0.9
    # container_name: cookme
    labels:
      #com.datadoghq.ad.check_names: '[""]'
      com.datadoghq.ad.init_configs: '[{}]'
      com.datadoghq.ad.instances: '[{"host":"%%host%%", "port": "%%port%%"}]'
      # com.datadoghq.ad.logs: '[{"source": "nodejs", "service": "cookmeapp"}]'
      com.datadoghq.tags.env:  ${NODE_ENV}
      com.datadoghq.tags.service: 'cookmeapp'
      com.datadoghq.tags.version: "latest"
      # com.datadoghq.ad.logs: >-
      # [{
      #     "type": "file",
      #     "path": "/root/.pm2/logs/cookme-out.log",
      #     "source": "nodejs",
      #     "service": "cookmeapp",
      #     "sourcecategory": "sourcecode",
      #     "auto_multi_line_detection": true
      #   }]
      com.datadoghq.ad.logs: >-
       [{
          "source": "nodejs",
          "service": "cookmeapp",
          "auto_multi_line_detection": true
        }]
      com.centurylinklabs.watchtower.scope: cookme
    # deploy:
    #   replicas: 1
    #   update_config:
    #     parallelism: 1
    #     delay: 10s
    #     order: start-first
    links:
      - db
    depends_on:
      - db
    networks:
      - cookme-app-net
    env_file:
      - .env
    restart: always
    ports:
      - 3100:3000
      # - 3000
    # ports:
    #   - 3100:3000
    volumes:
      - ./app/server/public/upload:/app/server/public/upload
      - ./app/temporary:/app/temporary
      - ./app/backups:/app/server/backups
      # - ./app/public/locales:/app/public/locales
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost:3000"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    #   start_period: 60s
  # nginx:
  #   image: nginx
  #   ports:
  #     - 80:80
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/nginx.conf:ro
  #   depends_on:
  #     - cookmeapp
  #   networks:
  #     - cookme-app-net

  cache:
    image: redis:7-alpine
    restart: always
    ports:
      - '6380:6379'
    command: redis-server --save 20 1 --loglevel warning --requirepass eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81
    volumes:
      - cache:/data

  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    environment:
        - WATCHTOWER_CLEANUP=true
        - REGISTRY_AUTH_TOKEN=${REGISTRY_AUTH_TOKEN}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - $HOME/.docker/config.json:/config.json
    labels:
      com.centurylinklabs.watchtower.scope: cookme cookme-gpt
    command: --interval 60 --scope cookme cookme-gpt
    env_file:
      - .env

volumes:
  cache:
    driver: local

